{"version":3,"sources":["js-tester.min.js"],"names":["jsTester","_len","arguments","length","args","Array","_key","apply","concat","initValue","label","code","tests","test","_len2","_key2","push","value","Promise","resolve","then","console","log","passed","this","func","undefined","reduce","promise","curTest","end"],"mappings":"aASA,SAAAA,WAAA,IAAA,IAAAC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GACA,GAAA,IAAAF,EAAAD,OACA,OAASH,SAATO,WAASP,EAAAA,CAAT,MAASA,OAAkBI,IAANA,GAAM,IAANA,EAAMD,OAAA,OAAAH,SAAAO,WAAA,EAAA,CAAA,IAAAC,OAAAJ,IAEzB,IAAAK,EAAOL,EAAP,GAAeM,EAARN,EAAP,GAAOO,EAAAP,EAAP,GAQKQ,EAAQ,GALb,MAAA,CACAC,KADA,WACA,IAAA,IAAAC,EAAAZ,UAAAC,OAAAC,EAAA,IAAAC,MAAAS,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAX,EAAAW,GAAAb,UAAAa,GAQC,GAAoB,IAAhBX,EAAKD,OANX,OAAOM,KAAPI,KAAOJ,MAAAA,KAAAA,CAA0BL,MAA1BK,OAAPL,IAEA,IAAMQ,EAANR,EAAA,GAAAO,EAAAP,EAAA,GA0BE,OAvBDS,EADMG,KAAA,SAAAC,GACQ,OAAAC,QAAAC,UAAAC,KAAA,WAEZ,OAFMhB,GAAMiB,QAAAC,IAAA,KAAAd,OAAAE,IAEZC,EAAOM,KACPG,KAAA,SAAAG,GAYKA,EAVNF,QAAOX,IAAeN,iBAAtB,iBAEAQ,QAAMI,IAAK,iBAAW,mBAgBfQ,MARLC,KAvBH,WAwBIJ,OAAAA,WAAY,IAAZA,EAAY,EAAAnB,UAAAC,aAAAuB,IAAAxB,UAAA,GAAAA,UAAA,GAALO,EAkBR,OAjBOS,QAAAC,UAAAC,KAAA,WAMT,OALGC,GACAA,QAAAC,IAAAZ,GAIHC,EAAAM,KAxBKG,KAAA,WA4ByB,OAD/BK,EA3BM,EAAAvB,UAAAC,aAAAuB,IAAAxB,UAAA,GAAAA,UAAA,GAAAe,EA4BGA,EAAsBU,OAAA,SAAAC,EAAAC,GAC7B,OAAID,EAAOR,KAAGF,WACb,OAAIR,EAAOO,MAEVC,QAAAC,aAGMC,KAAA,WAAwB,OAAAH,MAM7Ba,IAhDL,WAiDI,OAJMN,KAIJN,MAJIM","file":"js-tester.min.js","sourcesContent":["/**\n * Executes code and allow tests to be done agains the resulting value\n * @param  {...any} args\n * @returns {Promise}\n * @example\n * const tester = jsTester(() => {});\n * @example\n * const tester = jsTester('LABEL', () => {});\n * @example\n * const tester = jsTester({}, 'LABEL', () => {});\n */\nfunction jsTester(...args) {\n\tif (args.length === 1) {\n\t\treturn jsTester(null, ...args);\n\t}\n\tif (args.length === 2) {\n\t\treturn jsTester({}, ...args);\n\t}\n\n\tconst [initValue, label, code] = args;\n\n\tconst tests = [];\n\n\treturn {\n\t\ttest(...args) {\n\t\t\tif (args.length === 1) {\n\t\t\t\treturn this.test(null, ...args);\n\t\t\t}\n\n\t\t\tconst [label, code] = args;\n\n\t\t\ttests.push((value) => {\n\t\t\t\treturn Promise.resolve().then(() => {\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\tconsole.log(`  ${label}`);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn code(value);\n\t\t\t\t}).then((passed) => {\n\t\t\t\t\tif (passed) {\n\t\t\t\t\t\tconsole.log('    %c\\u2714 Passed', 'color: green;');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log('    %c\\u2716 Failed', 'color: red;');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn this;\n\t\t},\n\n\t\tfunc() {\n\t\t\treturn (value = initValue) => {\n\t\t\t\tlet promise = Promise.resolve().then(() => {\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\tconsole.log(label);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn code(value);\n\t\t\t\t}).then((finalValue = value) => {\n\t\t\t\t\tvalue = finalValue;\n\n\t\t\t\t\treturn tests.reduce((promise, curTest) => {\n\t\t\t\t\t\treturn promise.then(() => {\n\t\t\t\t\t\t\treturn curTest(value);\n\t\t\t\t\t\t});\n\t\t\t\t\t}, Promise.resolve());\n\t\t\t\t});\n\n\t\t\t\treturn promise.then(() => {\n\t\t\t\t\treturn value;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\n\t\tend() {\n\t\t\treturn (this.func())();\n\t\t}\n\t};\n}\n\n/* exported jsTester */\n"]}